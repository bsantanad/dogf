#!/usr/bin/env python3
'''
dogf
'''

import argparse
import os
import errno
import logging
import shutil
import getpass
import datetime

import yaml

import commonl

logging.basicConfig(
    format='[üê∂dogf] %(levelname)s: %(message)s'
)

def create(blog_name, directory= './'):
    '''
    create a blog directory with a config.yml and a posts dir
    with an example
    '''
    config_path = os.environ.get('HOME', '~/')
    dogf_path = os.path.join(config_path, '.dogf')
    if not os.path.exists(dogf_path):
        logging.error('installation not found, if you cloned the repo please'
                      ' read: README')
        return

    # create parent dir
    base_path = os.path.join(directory, blog_name)
    try:
        os.mkdir(base_path)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise
        print(f'[üê∂dogf] {base_path} already exists, please remove directory'
              ' if you want to create a new one')
        return

    # crate posts directory
    posts_path = os.path.join(base_path, 'posts')
    try:
        os.mkdir(posts_path)
    except OSError as e:
        raise e

    # cp example post to posts directory
    post_path = os.path.join(dogf_path, 'templates/post_example.md')
    post_ex_path = os.path.join(posts_path, 'example.md')
    try:
        shutil.copy(post_path, post_ex_path)
    except IOError as e:
        logging.error('unable to copy example post, please check your'
                      ' installation')
        raise e

    # get the config template change author and name and store it in
    # working directory
    config_path = os.path.join(dogf_path, 'templates/config.yml')
    with open(config_path, 'r') as file:
        try:
            config = yaml.safe_load(file)
        except yaml.YAMLError as e:
            logging.error('unable to read the config template file')
            raise e

    config['blog_name'] = blog_name
    config['author'] = getpass.getuser()
    config_ex_path = os.path.join(base_path, 'config.yml')
    with open(config_ex_path, 'w') as file:
        yaml.dump(config, file)

    print(f'[üê∂dogf] {blog_name} succesfully created')

def build_site(blog_path):
    # get config file
    config_file_path = os.path.join(blog_path, 'config.yml')
    try:
        with open(config_file_path, 'r') as file:
            try:
                config = yaml.safe_load(file)
            except yaml.YAMLError as e:
                logging.error('config.yml file corrupted please check the'
                              ' format')
                raise e
    except IOError as e:
        logging.error(f'unable to find config.yml file in {blog_path}. Are you'
                      ' in a in the head of a dogf directory?')
        return

    posts_path = os.path.join(blog_path, 'posts')
    site_path = os.path.join(blog_path, 'site')

    # get .dogf path
    config_path = os.environ.get('HOME', '~/')
    dogf_path = os.path.join(config_path, '.dogf')
    if not os.path.exists(dogf_path):
        logging.error('installation not found, if you cloned the repo please'
                      ' read: README')
        return

    # create/replace site directory
    if os.path.exists(site_path):
        shutil.rmtree(site_path)
    try:
        os.mkdir(site_path)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise

    style_path = os.path.join(site_path, 'style')
    try:
        os.mkdir(style_path)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise

    htmls_path = os.path.join(site_path, 'posts')
    try:
        os.mkdir(htmls_path)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise e

    # get css from templates
    config_css = os.path.join(dogf_path, 'templates/main.css')
    css_path = os.path.join(style_path, 'main.css')
    try:
        shutil.copy(config_css, css_path)
    except IOError as e:
        logging.error('unable to copy style for the blog, please check your'
                      ' installation')
        raise e

    # get config file
    config_file_path = os.path.join(blog_path, 'config.yml')
    try:
        with open(config_file_path, 'r') as file:
            try:
                config = yaml.safe_load(file)
            except yaml.YAMLError as e:
                logging.error('config.yml file corrupted please check the'
                              ' format')
                raise e
    except IOError as e:
        logging.error(f'unable to find config file in {blog_path}. Are you in'
                      ' a in the head of a dogf directory?')
        raise e

    # config is the dict with the yaml config
    try:
        posts = commonl.get_posts_names(posts_path)
    except IOError as e:
        logging.error(f'unable to find posts directory in {blog_path}.'
                      ' the one with the markdown files'
                      ' Are you in in the head of a dogf directory?')
        raise e

    # convert each post to html file and save it under site/posts
    # each obj_post is a dict, that has the following keys
    # title - mandatory
    # topic
    # date
    # html - mandatory
    obj_posts = []
    for post in posts:
        obj_post = commonl.md_to_html(post)
        if 'title' not in obj_post.keys():
            logging.error(f'unable to find title in {post}. Skipping post')
            continue
        obj_posts.append(obj_post)
        # create the post html
        filename = obj_post['title'].replace(' ', '-') + '.html'
        site_post_path = os.path.join(htmls_path, filename)
        post_config_path = os.path.join(dogf_path, 'templates/post.html')
        try:
            shutil.copy(post_config_path, site_post_path)
        except IOError as e:
            logging.error('unable to copy example post to your site, please'
                          ' check your installation')
            raise e
        obj_post['author'] = config['author']
        obj_post['main_color'] = config['main_color']
        obj_post['header_color'] = config['header_color']
        obj_post['header_border_color'] = config['header_border_color']
        obj_post['posts_bk_color'] = config['posts_bk_color']
        try:
            commonl.jinja_this_file(site_post_path, obj_post)
        except IOError as e:
            raise e

    # FIXME sort by date obj_posts, it can be done but i am too lazy now

    ## build_index
    # copy template index to site directoy
    index_config_path = os.path.join(dogf_path, 'templates/index.html')
    index_path = os.path.join(site_path, 'index.html')
    try:
        shutil.copy(index_config_path, index_path)
    except IOError as e:
        logging.error('unable to copy example index to your site, please check'
                      ' your installation')
        raise e

    # build obj to send to jinja for index template
    today = datetime.date.today()
    date = today.strftime("%b %d, %Y")
    obj = {
        'blog_name': config['blog_name'],
        'author': config['author'],
        'welcome_message': config['welcome_message'],
        'main_color': config['main_color'],
        'header_color': config['header_color'],
        'header_border_color' : config['header_border_color'],
        'posts_bk_color' : config['posts_bk_color'],
        'date': date,
        'articles': [],
    }
    for obj_post in obj_posts:
        tmp = {
            'title': obj_post['title'],
            'topic': obj_post['topic'],
            'date': obj_post['date'],
            'filename': obj_post['title'].replace(' ', '-'),
        }
        obj['articles'].append(tmp)

    try:
        commonl.jinja_this_file(index_path, obj)
    except IOError as e:
        raise e

def new(args):
    create(args.name, args.path)

def build(args):
    build_site(args.path)

def main():
    arg_parser = argparse.ArgumentParser()
    arg_subparsers = arg_parser.add_subparsers(help = 'commands')

    new_parser = arg_subparsers.add_parser(
        'new', help = 'create new blog')
    new_parser.set_defaults(func=new)
    new_parser.add_argument(
        'name', help = 'name of the new blog')
    new_parser.add_argument(
        '-p', '--path',  help = 'path where you want to create the blog',
        default = './'
    )

    build_parser = arg_subparsers.add_parser(
        'build',
        help = 'build blog, this means creating the site directory with the'
               ' htmls and so on'
    )
    build_parser.set_defaults(func=build)
    build_parser.add_argument(
        '-p', '--path',  help = 'path where you want to create the blog',
        default = './'
    )

    args = arg_parser.parse_args()
    try:
        func = args.func
    except AttributeError:
        arg_parser.error("too few arguments")
    func(args)

if __name__ == '__main__':
    main()
